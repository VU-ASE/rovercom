/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: remoteconfig.proto */

#ifndef PROTOBUF_C_remoteconfig_2eproto__INCLUDED
#define PROTOBUF_C_remoteconfig_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _ProtobufMsgs__ConfigMessage ProtobufMsgs__ConfigMessage;
typedef struct _ProtobufMsgs__ConfigMessage__HumanControlRequest ProtobufMsgs__ConfigMessage__HumanControlRequest;
typedef struct _ProtobufMsgs__ConfigMessage__HumanControlState ProtobufMsgs__ConfigMessage__HumanControlState;
typedef struct _ProtobufMsgs__ConfigMessage__CarState ProtobufMsgs__ConfigMessage__CarState;
typedef struct _ProtobufMsgs__ConfigMessage__Error ProtobufMsgs__ConfigMessage__Error;


/* --- enums --- */

typedef enum _ProtobufMsgs__ConfigMessage__ControlRequestType {
  PROTOBUF_MSGS__CONFIG_MESSAGE__CONTROL_REQUEST_TYPE__HUMAN_CONTROL_TAKEOVER = 0,
  PROTOBUF_MSGS__CONFIG_MESSAGE__CONTROL_REQUEST_TYPE__HUMAN_CONTROL_RELEASE = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTOBUF_MSGS__CONFIG_MESSAGE__CONTROL_REQUEST_TYPE)
} ProtobufMsgs__ConfigMessage__ControlRequestType;

/* --- messages --- */

struct  _ProtobufMsgs__ConfigMessage__HumanControlRequest
{
  ProtobufCMessage base;
  ProtobufMsgs__ConfigMessage__ControlRequestType type;
};
#define PROTOBUF_MSGS__CONFIG_MESSAGE__HUMAN_CONTROL_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protobuf_msgs__config_message__human_control_request__descriptor) \
    , PROTOBUF_MSGS__CONFIG_MESSAGE__CONTROL_REQUEST_TYPE__HUMAN_CONTROL_TAKEOVER }


struct  _ProtobufMsgs__ConfigMessage__HumanControlState
{
  ProtobufCMessage base;
  /*
   * let everyone know who is the active controller now
   */
  char *activecontrollerid;
};
#define PROTOBUF_MSGS__CONFIG_MESSAGE__HUMAN_CONTROL_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protobuf_msgs__config_message__human_control_state__descriptor) \
    , (char *)protobuf_c_empty_string }


/*
 * Broadcast car connects and disconnects
 */
struct  _ProtobufMsgs__ConfigMessage__CarState
{
  ProtobufCMessage base;
  protobuf_c_boolean connected;
  /*
   * We use these fields to calculate the offset between the car and the server time
   * this is used to correctly chart the car's data, even if the car and the server have different clocks
   * note: this does assume that the webcontroller and the forwarding server have synced clocks
   */
  /*
   * < 0 means that the car's time is behind the server's time, > 0 means that the car's time is ahead of the server's time
   */
  int64_t timestampoffset;
};
#define PROTOBUF_MSGS__CONFIG_MESSAGE__CAR_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protobuf_msgs__config_message__car_state__descriptor) \
    , 0, 0 }


/*
 * To report unknown or general errors
 */
struct  _ProtobufMsgs__ConfigMessage__Error
{
  ProtobufCMessage base;
  char *message;
};
#define PROTOBUF_MSGS__CONFIG_MESSAGE__ERROR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protobuf_msgs__config_message__error__descriptor) \
    , (char *)protobuf_c_empty_string }


typedef enum {
  PROTOBUF_MSGS__CONFIG_MESSAGE__ACTION__NOT_SET = 0,
  PROTOBUF_MSGS__CONFIG_MESSAGE__ACTION_HUMAN_CONTROL_REQUEST = 1,
  PROTOBUF_MSGS__CONFIG_MESSAGE__ACTION_HUMAN_CONTROL_STATE = 3,
  PROTOBUF_MSGS__CONFIG_MESSAGE__ACTION_CAR_STATE = 6,
  PROTOBUF_MSGS__CONFIG_MESSAGE__ACTION_ERROR = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTOBUF_MSGS__CONFIG_MESSAGE__ACTION)
} ProtobufMsgs__ConfigMessage__ActionCase;

/*
 * control messages exchanged by client(s), the server and the car
 */
struct  _ProtobufMsgs__ConfigMessage
{
  ProtobufCMessage base;
  int64_t timestamp;
  ProtobufMsgs__ConfigMessage__ActionCase action_case;
  union {
    ProtobufMsgs__ConfigMessage__HumanControlRequest *humancontrolrequest;
    ProtobufMsgs__ConfigMessage__HumanControlState *humancontrolstate;
    ProtobufMsgs__ConfigMessage__CarState *carstate;
    ProtobufMsgs__ConfigMessage__Error *error;
  };
};
#define PROTOBUF_MSGS__CONFIG_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protobuf_msgs__config_message__descriptor) \
    , 0, PROTOBUF_MSGS__CONFIG_MESSAGE__ACTION__NOT_SET, {0} }


/* ProtobufMsgs__ConfigMessage__HumanControlRequest methods */
void   protobuf_msgs__config_message__human_control_request__init
                     (ProtobufMsgs__ConfigMessage__HumanControlRequest         *message);
/* ProtobufMsgs__ConfigMessage__HumanControlState methods */
void   protobuf_msgs__config_message__human_control_state__init
                     (ProtobufMsgs__ConfigMessage__HumanControlState         *message);
/* ProtobufMsgs__ConfigMessage__CarState methods */
void   protobuf_msgs__config_message__car_state__init
                     (ProtobufMsgs__ConfigMessage__CarState         *message);
/* ProtobufMsgs__ConfigMessage__Error methods */
void   protobuf_msgs__config_message__error__init
                     (ProtobufMsgs__ConfigMessage__Error         *message);
/* ProtobufMsgs__ConfigMessage methods */
void   protobuf_msgs__config_message__init
                     (ProtobufMsgs__ConfigMessage         *message);
size_t protobuf_msgs__config_message__get_packed_size
                     (const ProtobufMsgs__ConfigMessage   *message);
size_t protobuf_msgs__config_message__pack
                     (const ProtobufMsgs__ConfigMessage   *message,
                      uint8_t             *out);
size_t protobuf_msgs__config_message__pack_to_buffer
                     (const ProtobufMsgs__ConfigMessage   *message,
                      ProtobufCBuffer     *buffer);
ProtobufMsgs__ConfigMessage *
       protobuf_msgs__config_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protobuf_msgs__config_message__free_unpacked
                     (ProtobufMsgs__ConfigMessage *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*ProtobufMsgs__ConfigMessage__HumanControlRequest_Closure)
                 (const ProtobufMsgs__ConfigMessage__HumanControlRequest *message,
                  void *closure_data);
typedef void (*ProtobufMsgs__ConfigMessage__HumanControlState_Closure)
                 (const ProtobufMsgs__ConfigMessage__HumanControlState *message,
                  void *closure_data);
typedef void (*ProtobufMsgs__ConfigMessage__CarState_Closure)
                 (const ProtobufMsgs__ConfigMessage__CarState *message,
                  void *closure_data);
typedef void (*ProtobufMsgs__ConfigMessage__Error_Closure)
                 (const ProtobufMsgs__ConfigMessage__Error *message,
                  void *closure_data);
typedef void (*ProtobufMsgs__ConfigMessage_Closure)
                 (const ProtobufMsgs__ConfigMessage *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor protobuf_msgs__config_message__descriptor;
extern const ProtobufCMessageDescriptor protobuf_msgs__config_message__human_control_request__descriptor;
extern const ProtobufCMessageDescriptor protobuf_msgs__config_message__human_control_state__descriptor;
extern const ProtobufCMessageDescriptor protobuf_msgs__config_message__car_state__descriptor;
extern const ProtobufCMessageDescriptor protobuf_msgs__config_message__error__descriptor;
extern const ProtobufCEnumDescriptor    protobuf_msgs__config_message__control_request_type__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_remoteconfig_2eproto__INCLUDED */
