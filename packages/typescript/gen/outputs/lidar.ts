// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.12.4
// source: outputs/lidar.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "protobuf_msgs";

export interface LidarSensorOutput {
  /** Many (but not necessarily all) scans in a single rotation */
  scans: LidarSensorOutput_Scan[];
}

/** A scan corresponds to a single shot of the laser. One rotation contains many scans. */
export interface LidarSensorOutput_Scan {
  /** angle in degrees */
  angle: number;
  /** distance in meters */
  distance: number;
  /** quality of the scan (0 is worst, 255 is best) */
  quality: number;
  /** true if this is the start of a new scan rotation */
  isStart: boolean;
}

function createBaseLidarSensorOutput(): LidarSensorOutput {
  return { scans: [] };
}

export const LidarSensorOutput: MessageFns<LidarSensorOutput> = {
  encode(message: LidarSensorOutput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.scans) {
      LidarSensorOutput_Scan.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LidarSensorOutput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLidarSensorOutput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.scans.push(LidarSensorOutput_Scan.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LidarSensorOutput {
    return {
      scans: globalThis.Array.isArray(object?.scans)
        ? object.scans.map((e: any) => LidarSensorOutput_Scan.fromJSON(e))
        : [],
    };
  },

  toJSON(message: LidarSensorOutput): unknown {
    const obj: any = {};
    if (message.scans?.length) {
      obj.scans = message.scans.map((e) => LidarSensorOutput_Scan.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LidarSensorOutput>, I>>(base?: I): LidarSensorOutput {
    return LidarSensorOutput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LidarSensorOutput>, I>>(object: I): LidarSensorOutput {
    const message = createBaseLidarSensorOutput();
    message.scans = object.scans?.map((e) => LidarSensorOutput_Scan.fromPartial(e)) || [];
    return message;
  },
};

function createBaseLidarSensorOutput_Scan(): LidarSensorOutput_Scan {
  return { angle: 0, distance: 0, quality: 0, isStart: false };
}

export const LidarSensorOutput_Scan: MessageFns<LidarSensorOutput_Scan> = {
  encode(message: LidarSensorOutput_Scan, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.angle !== 0) {
      writer.uint32(13).float(message.angle);
    }
    if (message.distance !== 0) {
      writer.uint32(21).float(message.distance);
    }
    if (message.quality !== 0) {
      writer.uint32(24).uint32(message.quality);
    }
    if (message.isStart !== false) {
      writer.uint32(32).bool(message.isStart);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LidarSensorOutput_Scan {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLidarSensorOutput_Scan();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 13) {
            break;
          }

          message.angle = reader.float();
          continue;
        }
        case 2: {
          if (tag !== 21) {
            break;
          }

          message.distance = reader.float();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.quality = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.isStart = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LidarSensorOutput_Scan {
    return {
      angle: isSet(object.angle) ? globalThis.Number(object.angle) : 0,
      distance: isSet(object.distance) ? globalThis.Number(object.distance) : 0,
      quality: isSet(object.quality) ? globalThis.Number(object.quality) : 0,
      isStart: isSet(object.isStart) ? globalThis.Boolean(object.isStart) : false,
    };
  },

  toJSON(message: LidarSensorOutput_Scan): unknown {
    const obj: any = {};
    if (message.angle !== 0) {
      obj.angle = message.angle;
    }
    if (message.distance !== 0) {
      obj.distance = message.distance;
    }
    if (message.quality !== 0) {
      obj.quality = Math.round(message.quality);
    }
    if (message.isStart !== false) {
      obj.isStart = message.isStart;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LidarSensorOutput_Scan>, I>>(base?: I): LidarSensorOutput_Scan {
    return LidarSensorOutput_Scan.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LidarSensorOutput_Scan>, I>>(object: I): LidarSensorOutput_Scan {
    const message = createBaseLidarSensorOutput_Scan();
    message.angle = object.angle ?? 0;
    message.distance = object.distance ?? 0;
    message.quality = object.quality ?? 0;
    message.isStart = object.isStart ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
