// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.12.4
// source: outputs/camera.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "protobuf_msgs";

/** Possible Objects the Imaging Service may detect */
export enum DetectedObjects {
  /** FINISH_LINE - Finish_line_detected */
  FINISH_LINE = 0,
  /** OFF_TRACK - Car no longer on the track */
  OFF_TRACK = 1,
  /** OBSTACLE - Detected obstacle */
  OBSTACLE = 2,
  /** INTERSECTION - Detected intersection */
  INTERSECTION = 3,
  /** MISSING_LEFT_LANE - Can not find left lane */
  MISSING_LEFT_LANE = 4,
  /** MISSING_RIGHT_LANE - Can not find right lane */
  MISSING_RIGHT_LANE = 5,
  /** SHARP_RIGHT - 90 degree right turn */
  SHARP_RIGHT = 6,
  /** SHARP_LEFT - 90 degree left turn */
  SHARP_LEFT = 7,
  /** U_TURN - Detected U turn */
  U_TURN = 8,
  /** S_TURN - Detected S turn (double u turn) */
  S_TURN = 9,
  UNRECOGNIZED = -1,
}

export function detectedObjectsFromJSON(object: any): DetectedObjects {
  switch (object) {
    case 0:
    case "FINISH_LINE":
      return DetectedObjects.FINISH_LINE;
    case 1:
    case "OFF_TRACK":
      return DetectedObjects.OFF_TRACK;
    case 2:
    case "OBSTACLE":
      return DetectedObjects.OBSTACLE;
    case 3:
    case "INTERSECTION":
      return DetectedObjects.INTERSECTION;
    case 4:
    case "MISSING_LEFT_LANE":
      return DetectedObjects.MISSING_LEFT_LANE;
    case 5:
    case "MISSING_RIGHT_LANE":
      return DetectedObjects.MISSING_RIGHT_LANE;
    case 6:
    case "SHARP_RIGHT":
      return DetectedObjects.SHARP_RIGHT;
    case 7:
    case "SHARP_LEFT":
      return DetectedObjects.SHARP_LEFT;
    case 8:
    case "U_TURN":
      return DetectedObjects.U_TURN;
    case 9:
    case "S_TURN":
      return DetectedObjects.S_TURN;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DetectedObjects.UNRECOGNIZED;
  }
}

export function detectedObjectsToJSON(object: DetectedObjects): string {
  switch (object) {
    case DetectedObjects.FINISH_LINE:
      return "FINISH_LINE";
    case DetectedObjects.OFF_TRACK:
      return "OFF_TRACK";
    case DetectedObjects.OBSTACLE:
      return "OBSTACLE";
    case DetectedObjects.INTERSECTION:
      return "INTERSECTION";
    case DetectedObjects.MISSING_LEFT_LANE:
      return "MISSING_LEFT_LANE";
    case DetectedObjects.MISSING_RIGHT_LANE:
      return "MISSING_RIGHT_LANE";
    case DetectedObjects.SHARP_RIGHT:
      return "SHARP_RIGHT";
    case DetectedObjects.SHARP_LEFT:
      return "SHARP_LEFT";
    case DetectedObjects.U_TURN:
      return "U_TURN";
    case DetectedObjects.S_TURN:
      return "S_TURN";
    case DetectedObjects.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * This is the message format that a camera-like service can send out. For example, the official ASE imaging service
 * uses this output format. This can then be used by (for example) a controller, to determine how to steer, to stay
 * on the track, or to detect obstacles, intersections, etc.
 */
export interface CameraSensorOutput {
  /** Basic information, contains everything you need to know to steer and compute the middle of the track */
  resolution:
    | Resolution
    | undefined;
  /** Horizontal scans of the track, where each scan returns the track edges it finds in the image */
  horizontalScans: HorizontalScan[];
  detectedObjects: DetectedObjects[];
  /**
   * Additional information that can be used to debug the image processing
   * if present, it is rendered in roverctl-web
   */
  debugFrame: DebugFrame | undefined;
}

export interface Resolution {
  /** Width of the image in pixels */
  width: number;
  /** Height of the image in pixels */
  height: number;
}

export interface HorizontalScan {
  /** Leftmost point in the scan in pixels (is left edge of the track) */
  xLeft: number;
  /** Rightmost point in the scan in pixels (is right edge of the track) */
  xRight: number;
  /** Y coordinate of the scan in pixels */
  y: number;
}

export interface DebugFrame {
  /**
   * (Compressed) JPEG image of the camera output, useful for debugging
   * just JPEG bytes, that will be rendered in roverctl-web
   */
  jpeg: Uint8Array;
  /** A "canvas" that you can "draw" on, for example by placing points, these are also rendered in roverctl-web */
  canvas: Canvas | undefined;
}

export interface CanvasObject {
  circle?: CanvasObject_Circle | undefined;
}

export interface CanvasObject_Point {
  x: number;
  y: number;
}

export interface CanvasObject_Circle {
  center: CanvasObject_Point | undefined;
  radius: number;
  width: number;
}

export interface Canvas {
  /** The width and height are a legacy feature, they should be the same as the resolution of the camera */
  width: number;
  height: number;
  objects: CanvasObject[];
}

function createBaseCameraSensorOutput(): CameraSensorOutput {
  return { resolution: undefined, horizontalScans: [], detectedObjects: [], debugFrame: undefined };
}

export const CameraSensorOutput: MessageFns<CameraSensorOutput> = {
  encode(message: CameraSensorOutput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resolution !== undefined) {
      Resolution.encode(message.resolution, writer.uint32(10).fork()).join();
    }
    for (const v of message.horizontalScans) {
      HorizontalScan.encode(v!, writer.uint32(18).fork()).join();
    }
    writer.uint32(26).fork();
    for (const v of message.detectedObjects) {
      writer.int32(v);
    }
    writer.join();
    if (message.debugFrame !== undefined) {
      DebugFrame.encode(message.debugFrame, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CameraSensorOutput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCameraSensorOutput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.resolution = Resolution.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.horizontalScans.push(HorizontalScan.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag === 24) {
            message.detectedObjects.push(reader.int32() as any);

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.detectedObjects.push(reader.int32() as any);
            }

            continue;
          }

          break;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.debugFrame = DebugFrame.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CameraSensorOutput {
    return {
      resolution: isSet(object.resolution) ? Resolution.fromJSON(object.resolution) : undefined,
      horizontalScans: globalThis.Array.isArray(object?.horizontalScans)
        ? object.horizontalScans.map((e: any) => HorizontalScan.fromJSON(e))
        : [],
      detectedObjects: globalThis.Array.isArray(object?.detectedObjects)
        ? object.detectedObjects.map((e: any) => detectedObjectsFromJSON(e))
        : [],
      debugFrame: isSet(object.debugFrame) ? DebugFrame.fromJSON(object.debugFrame) : undefined,
    };
  },

  toJSON(message: CameraSensorOutput): unknown {
    const obj: any = {};
    if (message.resolution !== undefined) {
      obj.resolution = Resolution.toJSON(message.resolution);
    }
    if (message.horizontalScans?.length) {
      obj.horizontalScans = message.horizontalScans.map((e) => HorizontalScan.toJSON(e));
    }
    if (message.detectedObjects?.length) {
      obj.detectedObjects = message.detectedObjects.map((e) => detectedObjectsToJSON(e));
    }
    if (message.debugFrame !== undefined) {
      obj.debugFrame = DebugFrame.toJSON(message.debugFrame);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CameraSensorOutput>, I>>(base?: I): CameraSensorOutput {
    return CameraSensorOutput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CameraSensorOutput>, I>>(object: I): CameraSensorOutput {
    const message = createBaseCameraSensorOutput();
    message.resolution = (object.resolution !== undefined && object.resolution !== null)
      ? Resolution.fromPartial(object.resolution)
      : undefined;
    message.horizontalScans = object.horizontalScans?.map((e) => HorizontalScan.fromPartial(e)) || [];
    message.detectedObjects = object.detectedObjects?.map((e) => e) || [];
    message.debugFrame = (object.debugFrame !== undefined && object.debugFrame !== null)
      ? DebugFrame.fromPartial(object.debugFrame)
      : undefined;
    return message;
  },
};

function createBaseResolution(): Resolution {
  return { width: 0, height: 0 };
}

export const Resolution: MessageFns<Resolution> = {
  encode(message: Resolution, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.width !== 0) {
      writer.uint32(8).uint32(message.width);
    }
    if (message.height !== 0) {
      writer.uint32(16).uint32(message.height);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Resolution {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResolution();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.width = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.height = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Resolution {
    return {
      width: isSet(object.width) ? globalThis.Number(object.width) : 0,
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
    };
  },

  toJSON(message: Resolution): unknown {
    const obj: any = {};
    if (message.width !== 0) {
      obj.width = Math.round(message.width);
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Resolution>, I>>(base?: I): Resolution {
    return Resolution.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Resolution>, I>>(object: I): Resolution {
    const message = createBaseResolution();
    message.width = object.width ?? 0;
    message.height = object.height ?? 0;
    return message;
  },
};

function createBaseHorizontalScan(): HorizontalScan {
  return { xLeft: 0, xRight: 0, y: 0 };
}

export const HorizontalScan: MessageFns<HorizontalScan> = {
  encode(message: HorizontalScan, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.xLeft !== 0) {
      writer.uint32(8).uint32(message.xLeft);
    }
    if (message.xRight !== 0) {
      writer.uint32(16).uint32(message.xRight);
    }
    if (message.y !== 0) {
      writer.uint32(24).uint32(message.y);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HorizontalScan {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHorizontalScan();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.xLeft = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.xRight = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.y = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HorizontalScan {
    return {
      xLeft: isSet(object.xLeft) ? globalThis.Number(object.xLeft) : 0,
      xRight: isSet(object.xRight) ? globalThis.Number(object.xRight) : 0,
      y: isSet(object.y) ? globalThis.Number(object.y) : 0,
    };
  },

  toJSON(message: HorizontalScan): unknown {
    const obj: any = {};
    if (message.xLeft !== 0) {
      obj.xLeft = Math.round(message.xLeft);
    }
    if (message.xRight !== 0) {
      obj.xRight = Math.round(message.xRight);
    }
    if (message.y !== 0) {
      obj.y = Math.round(message.y);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HorizontalScan>, I>>(base?: I): HorizontalScan {
    return HorizontalScan.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HorizontalScan>, I>>(object: I): HorizontalScan {
    const message = createBaseHorizontalScan();
    message.xLeft = object.xLeft ?? 0;
    message.xRight = object.xRight ?? 0;
    message.y = object.y ?? 0;
    return message;
  },
};

function createBaseDebugFrame(): DebugFrame {
  return { jpeg: new Uint8Array(0), canvas: undefined };
}

export const DebugFrame: MessageFns<DebugFrame> = {
  encode(message: DebugFrame, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.jpeg.length !== 0) {
      writer.uint32(10).bytes(message.jpeg);
    }
    if (message.canvas !== undefined) {
      Canvas.encode(message.canvas, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DebugFrame {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDebugFrame();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.jpeg = reader.bytes();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.canvas = Canvas.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DebugFrame {
    return {
      jpeg: isSet(object.jpeg) ? bytesFromBase64(object.jpeg) : new Uint8Array(0),
      canvas: isSet(object.canvas) ? Canvas.fromJSON(object.canvas) : undefined,
    };
  },

  toJSON(message: DebugFrame): unknown {
    const obj: any = {};
    if (message.jpeg.length !== 0) {
      obj.jpeg = base64FromBytes(message.jpeg);
    }
    if (message.canvas !== undefined) {
      obj.canvas = Canvas.toJSON(message.canvas);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DebugFrame>, I>>(base?: I): DebugFrame {
    return DebugFrame.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DebugFrame>, I>>(object: I): DebugFrame {
    const message = createBaseDebugFrame();
    message.jpeg = object.jpeg ?? new Uint8Array(0);
    message.canvas = (object.canvas !== undefined && object.canvas !== null)
      ? Canvas.fromPartial(object.canvas)
      : undefined;
    return message;
  },
};

function createBaseCanvasObject(): CanvasObject {
  return { circle: undefined };
}

export const CanvasObject: MessageFns<CanvasObject> = {
  encode(message: CanvasObject, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.circle !== undefined) {
      CanvasObject_Circle.encode(message.circle, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CanvasObject {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCanvasObject();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.circle = CanvasObject_Circle.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CanvasObject {
    return { circle: isSet(object.circle) ? CanvasObject_Circle.fromJSON(object.circle) : undefined };
  },

  toJSON(message: CanvasObject): unknown {
    const obj: any = {};
    if (message.circle !== undefined) {
      obj.circle = CanvasObject_Circle.toJSON(message.circle);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CanvasObject>, I>>(base?: I): CanvasObject {
    return CanvasObject.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CanvasObject>, I>>(object: I): CanvasObject {
    const message = createBaseCanvasObject();
    message.circle = (object.circle !== undefined && object.circle !== null)
      ? CanvasObject_Circle.fromPartial(object.circle)
      : undefined;
    return message;
  },
};

function createBaseCanvasObject_Point(): CanvasObject_Point {
  return { x: 0, y: 0 };
}

export const CanvasObject_Point: MessageFns<CanvasObject_Point> = {
  encode(message: CanvasObject_Point, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.x !== 0) {
      writer.uint32(8).uint32(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(16).uint32(message.y);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CanvasObject_Point {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCanvasObject_Point();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.x = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.y = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CanvasObject_Point {
    return {
      x: isSet(object.x) ? globalThis.Number(object.x) : 0,
      y: isSet(object.y) ? globalThis.Number(object.y) : 0,
    };
  },

  toJSON(message: CanvasObject_Point): unknown {
    const obj: any = {};
    if (message.x !== 0) {
      obj.x = Math.round(message.x);
    }
    if (message.y !== 0) {
      obj.y = Math.round(message.y);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CanvasObject_Point>, I>>(base?: I): CanvasObject_Point {
    return CanvasObject_Point.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CanvasObject_Point>, I>>(object: I): CanvasObject_Point {
    const message = createBaseCanvasObject_Point();
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    return message;
  },
};

function createBaseCanvasObject_Circle(): CanvasObject_Circle {
  return { center: undefined, radius: 0, width: 0 };
}

export const CanvasObject_Circle: MessageFns<CanvasObject_Circle> = {
  encode(message: CanvasObject_Circle, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.center !== undefined) {
      CanvasObject_Point.encode(message.center, writer.uint32(10).fork()).join();
    }
    if (message.radius !== 0) {
      writer.uint32(16).uint32(message.radius);
    }
    if (message.width !== 0) {
      writer.uint32(24).uint32(message.width);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CanvasObject_Circle {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCanvasObject_Circle();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.center = CanvasObject_Point.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.radius = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.width = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CanvasObject_Circle {
    return {
      center: isSet(object.center) ? CanvasObject_Point.fromJSON(object.center) : undefined,
      radius: isSet(object.radius) ? globalThis.Number(object.radius) : 0,
      width: isSet(object.width) ? globalThis.Number(object.width) : 0,
    };
  },

  toJSON(message: CanvasObject_Circle): unknown {
    const obj: any = {};
    if (message.center !== undefined) {
      obj.center = CanvasObject_Point.toJSON(message.center);
    }
    if (message.radius !== 0) {
      obj.radius = Math.round(message.radius);
    }
    if (message.width !== 0) {
      obj.width = Math.round(message.width);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CanvasObject_Circle>, I>>(base?: I): CanvasObject_Circle {
    return CanvasObject_Circle.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CanvasObject_Circle>, I>>(object: I): CanvasObject_Circle {
    const message = createBaseCanvasObject_Circle();
    message.center = (object.center !== undefined && object.center !== null)
      ? CanvasObject_Point.fromPartial(object.center)
      : undefined;
    message.radius = object.radius ?? 0;
    message.width = object.width ?? 0;
    return message;
  },
};

function createBaseCanvas(): Canvas {
  return { width: 0, height: 0, objects: [] };
}

export const Canvas: MessageFns<Canvas> = {
  encode(message: Canvas, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.width !== 0) {
      writer.uint32(8).uint32(message.width);
    }
    if (message.height !== 0) {
      writer.uint32(16).uint32(message.height);
    }
    for (const v of message.objects) {
      CanvasObject.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Canvas {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCanvas();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.width = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.height = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.objects.push(CanvasObject.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Canvas {
    return {
      width: isSet(object.width) ? globalThis.Number(object.width) : 0,
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      objects: globalThis.Array.isArray(object?.objects)
        ? object.objects.map((e: any) => CanvasObject.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Canvas): unknown {
    const obj: any = {};
    if (message.width !== 0) {
      obj.width = Math.round(message.width);
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.objects?.length) {
      obj.objects = message.objects.map((e) => CanvasObject.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Canvas>, I>>(base?: I): Canvas {
    return Canvas.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Canvas>, I>>(object: I): Canvas {
    const message = createBaseCanvas();
    message.width = object.width ?? 0;
    message.height = object.height ?? 0;
    message.objects = object.objects?.map((e) => CanvasObject.fromPartial(e)) || [];
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
