// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.12.4
// source: outputs/rpm.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "protobuf_msgs";

/**
 * This is the message format that a RPM sensor service can send out. It is deliberately left with many details, to allow
 * for different use cases.
 */
export interface RpmSensorOutput {
  leftMotor: MotorInformation | undefined;
  rightMotor: MotorInformation | undefined;
}

export interface MotorInformation {
  /** This is probably all the information you need to understand how the motor behaves */
  rpm: number;
  /** Speed in m/s, as computed from the RPM */
  speed: number;
  /** More fine-grained details to (re)compute the RPM and speed or other parameters you are interested in */
  ticks: number;
  /** Number of timeouts since the last timer reset, if this is greater than 0, the motor is not spinning */
  timeoutCount: number;
  /** Sequence number of the message, can be used to detect if the message is stale */
  sequenceNumber: number;
}

function createBaseRpmSensorOutput(): RpmSensorOutput {
  return { leftMotor: undefined, rightMotor: undefined };
}

export const RpmSensorOutput: MessageFns<RpmSensorOutput> = {
  encode(message: RpmSensorOutput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.leftMotor !== undefined) {
      MotorInformation.encode(message.leftMotor, writer.uint32(10).fork()).join();
    }
    if (message.rightMotor !== undefined) {
      MotorInformation.encode(message.rightMotor, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RpmSensorOutput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRpmSensorOutput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.leftMotor = MotorInformation.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.rightMotor = MotorInformation.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RpmSensorOutput {
    return {
      leftMotor: isSet(object.leftMotor) ? MotorInformation.fromJSON(object.leftMotor) : undefined,
      rightMotor: isSet(object.rightMotor) ? MotorInformation.fromJSON(object.rightMotor) : undefined,
    };
  },

  toJSON(message: RpmSensorOutput): unknown {
    const obj: any = {};
    if (message.leftMotor !== undefined) {
      obj.leftMotor = MotorInformation.toJSON(message.leftMotor);
    }
    if (message.rightMotor !== undefined) {
      obj.rightMotor = MotorInformation.toJSON(message.rightMotor);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RpmSensorOutput>, I>>(base?: I): RpmSensorOutput {
    return RpmSensorOutput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RpmSensorOutput>, I>>(object: I): RpmSensorOutput {
    const message = createBaseRpmSensorOutput();
    message.leftMotor = (object.leftMotor !== undefined && object.leftMotor !== null)
      ? MotorInformation.fromPartial(object.leftMotor)
      : undefined;
    message.rightMotor = (object.rightMotor !== undefined && object.rightMotor !== null)
      ? MotorInformation.fromPartial(object.rightMotor)
      : undefined;
    return message;
  },
};

function createBaseMotorInformation(): MotorInformation {
  return { rpm: 0, speed: 0, ticks: 0, timeoutCount: 0, sequenceNumber: 0 };
}

export const MotorInformation: MessageFns<MotorInformation> = {
  encode(message: MotorInformation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rpm !== 0) {
      writer.uint32(13).float(message.rpm);
    }
    if (message.speed !== 0) {
      writer.uint32(21).float(message.speed);
    }
    if (message.ticks !== 0) {
      writer.uint32(24).uint32(message.ticks);
    }
    if (message.timeoutCount !== 0) {
      writer.uint32(32).uint32(message.timeoutCount);
    }
    if (message.sequenceNumber !== 0) {
      writer.uint32(40).uint32(message.sequenceNumber);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MotorInformation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMotorInformation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 13) {
            break;
          }

          message.rpm = reader.float();
          continue;
        }
        case 2: {
          if (tag !== 21) {
            break;
          }

          message.speed = reader.float();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.ticks = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.timeoutCount = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.sequenceNumber = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MotorInformation {
    return {
      rpm: isSet(object.rpm) ? globalThis.Number(object.rpm) : 0,
      speed: isSet(object.speed) ? globalThis.Number(object.speed) : 0,
      ticks: isSet(object.ticks) ? globalThis.Number(object.ticks) : 0,
      timeoutCount: isSet(object.timeoutCount) ? globalThis.Number(object.timeoutCount) : 0,
      sequenceNumber: isSet(object.sequenceNumber) ? globalThis.Number(object.sequenceNumber) : 0,
    };
  },

  toJSON(message: MotorInformation): unknown {
    const obj: any = {};
    if (message.rpm !== 0) {
      obj.rpm = message.rpm;
    }
    if (message.speed !== 0) {
      obj.speed = message.speed;
    }
    if (message.ticks !== 0) {
      obj.ticks = Math.round(message.ticks);
    }
    if (message.timeoutCount !== 0) {
      obj.timeoutCount = Math.round(message.timeoutCount);
    }
    if (message.sequenceNumber !== 0) {
      obj.sequenceNumber = Math.round(message.sequenceNumber);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MotorInformation>, I>>(base?: I): MotorInformation {
    return MotorInformation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MotorInformation>, I>>(object: I): MotorInformation {
    const message = createBaseMotorInformation();
    message.rpm = object.rpm ?? 0;
    message.speed = object.speed ?? 0;
    message.ticks = object.ticks ?? 0;
    message.timeoutCount = object.timeoutCount ?? 0;
    message.sequenceNumber = object.sequenceNumber ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
