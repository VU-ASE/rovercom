// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.12.4
// source: outputs/current.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "protobuf_msgs";

export interface CurrentSensorOutput {
  /** Bus/Supply voltage in volts (V) */
  supplyVoltage: number;
  /** Current in amperes (A) */
  currentAmps: number;
  /** Power in watts (W) */
  powerWatts: number;
}

function createBaseCurrentSensorOutput(): CurrentSensorOutput {
  return { supplyVoltage: 0, currentAmps: 0, powerWatts: 0 };
}

export const CurrentSensorOutput: MessageFns<CurrentSensorOutput> = {
  encode(message: CurrentSensorOutput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.supplyVoltage !== 0) {
      writer.uint32(13).float(message.supplyVoltage);
    }
    if (message.currentAmps !== 0) {
      writer.uint32(21).float(message.currentAmps);
    }
    if (message.powerWatts !== 0) {
      writer.uint32(29).float(message.powerWatts);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CurrentSensorOutput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCurrentSensorOutput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 13) {
            break;
          }

          message.supplyVoltage = reader.float();
          continue;
        }
        case 2: {
          if (tag !== 21) {
            break;
          }

          message.currentAmps = reader.float();
          continue;
        }
        case 3: {
          if (tag !== 29) {
            break;
          }

          message.powerWatts = reader.float();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CurrentSensorOutput {
    return {
      supplyVoltage: isSet(object.supplyVoltage) ? globalThis.Number(object.supplyVoltage) : 0,
      currentAmps: isSet(object.currentAmps) ? globalThis.Number(object.currentAmps) : 0,
      powerWatts: isSet(object.powerWatts) ? globalThis.Number(object.powerWatts) : 0,
    };
  },

  toJSON(message: CurrentSensorOutput): unknown {
    const obj: any = {};
    if (message.supplyVoltage !== 0) {
      obj.supplyVoltage = message.supplyVoltage;
    }
    if (message.currentAmps !== 0) {
      obj.currentAmps = message.currentAmps;
    }
    if (message.powerWatts !== 0) {
      obj.powerWatts = message.powerWatts;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CurrentSensorOutput>, I>>(base?: I): CurrentSensorOutput {
    return CurrentSensorOutput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CurrentSensorOutput>, I>>(object: I): CurrentSensorOutput {
    const message = createBaseCurrentSensorOutput();
    message.supplyVoltage = object.supplyVoltage ?? 0;
    message.currentAmps = object.currentAmps ?? 0;
    message.powerWatts = object.powerWatts ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
