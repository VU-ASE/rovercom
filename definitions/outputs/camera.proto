syntax = "proto3";

package protobuf_msgs;

option go_package = "ase/pb_outputs";

//
// This is the message format that a camera-like service can send out. For example, the official ASE imaging service
// uses this output format. This can then be used by (for example) a controller, to determine how to steer, to stay
// on the track, or to detect obstacles, intersections, etc.
//
message CameraSensorOutput {
    // Basic information, contains everything you need to know to steer and compute the middle of the track
    Resolution resolution = 1; // Resolution of the image in pixels
    repeated HorizontalScan horizontalScans = 2; // Horizontal scans of the track, where each scan returns the track edges it finds in the image
    repeated DetectedObjects detectedObjects = 3;

    // Additional information that can be used to debug the image processing
    // if present, it is rendered in roverctl-web
    DebugFrame debugFrame = 4; 
}

// Possible Objects the Imaging Service may detect
enum DetectedObjects {
    FINISH_LINE         = 0; /* Finish_line_detected */
    OFF_TRACK           = 1; /* Car no longer on the track */
    OBSTACLE            = 2; /* Detected obstacle */
    INTERSECTION        = 3;  /* Detected intersection */
    MISSING_LEFT_LANE   = 4;  /* Can not find left lane */
    MISSING_RIGHT_LANE  = 5;  /* Can not find right lane */
    SHARP_RIGHT         = 6;  /* 90 degree right turn */
    SHARP_LEFT          = 7;  /* 90 degree left turn  */
    U_TURN              = 8;  /* Detected U turn */
    S_TURN              = 9;  /* Detected S turn (double u turn) */
}

message Resolution {
    uint32 width = 1;  // Width of the image in pixels
    uint32 height = 2; // Height of the image in pixels
}

message HorizontalScan {    
    uint32 xLeft = 1; // Leftmost point in the scan in pixels (is left edge of the track)
    uint32 xRight = 2; // Rightmost point in the scan in pixels (is right edge of the track)
    uint32 y = 3; // Y coordinate of the scan in pixels
}

message DebugFrame {
    // (Compressed) JPEG image of the camera output, useful for debugging
    // just JPEG bytes, that will be rendered in roverctl-web
    bytes jpeg = 1;
    // A "canvas" that you can "draw" on, for example by placing points, these are also rendered in roverctl-web
    Canvas canvas = 5; 
}

message CanvasObject {
    message Point {
        uint32 x = 1;
        uint32 y = 2;
    }

    message Circle {
        Point center = 1;
        uint32 radius = 2;
        uint32 width = 3;
    }

    oneof object {
        Circle circle = 1;
    }
}

message Canvas {
    // The width and height are a legacy feature, they should be the same as the resolution of the camera
    uint32 width = 1;
    uint32 height = 2;
    repeated CanvasObject objects = 3;
}
