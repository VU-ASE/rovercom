syntax = "proto3";

package protobuf_msgs;

option go_package = "ase/pb_module_outputs";

//
// Messages that can be outputed by a camera module
//

message CanvasObject {
    message Point {
        uint32 x = 1;
        uint32 y = 2;
    }

    message Color {
        uint32 r = 1;
        uint32 g = 2;
        uint32 b = 3;
        uint32 a = 4;
    }

    message Line {
        Point start = 1;
        Point end = 2;
        uint32 width = 3;
        Color color = 4;
    }

    message Rectangle {
        Point topLeft = 1;
        Point bottomRight = 2;
        uint32 width = 3;
        Color color = 4;
    }

    message Circle {
        Point center = 1;
        uint32 radius = 2;
        uint32 width = 3;
        Color color = 4;
    }

    oneof object {
        Line line = 1;
        Rectangle rectangle = 2;
        Circle circle = 3;
    }
}

message Canvas {
    uint32 width = 1;
    uint32 height = 2;
    repeated CanvasObject objects = 3;
}

// Possible Objects the Imaging Module may detect
enum DetectedObjects {
    FINISH_LINE         = 0; /* Finish_line_detected */
    OFF_TRACK           = 1; /* Car no longer on the track */
    OBSTACLE            = 2; /* Detected obstacle */
    INTERSECTION        = 3;  /* Detected intersection */
    MISSING_LEFT_LANE   = 4;  /* Can not find left lane */
    MISSING_RIGHT_LANE  = 5;  /* Can not find right lane */
    SHARP_RIGHT         = 6;  /* 90 degree right turn */
    SHARP_LEFT          = 7;  /* 90 degree left turn  */
    U_TURN              = 8;  /* Detected U turn */
    S_TURN              = 9;  /* Detected S turn (double u turn) */
}

//
// The following sensor outputs are specific to the sensor type, bring your own sensor and add your own output here!
//
message CameraSensorOutput {
    // Defined by the Path Planner
    message Trajectory {
        message Point {
            int32 x = 1;
            int32 y = 2;
        }
        repeated Point points = 1;
        uint32 width = 2;
        uint32 height = 3;
    }

    Trajectory trajectory = 1;

    message DebugFrame {
        bytes jpeg = 1;
        // if image livestreaming is disabled, or imaging module wants to draw additional information on the image, it can be done here
        Canvas canvas = 5; 
    }
    
    DebugFrame debug_frame = 2;

    message Objects {
        repeated DetectedObjects items = 1;
    }

    Objects objects = 3;
}
