syntax = "proto3";

package protobuf_msgs;

option go_package = "ase/pb_remote_config_messages";

// control messages exchanged by client(s), the server and the car
message ConfigMessage {
    enum ControlRequestType {
        HUMAN_CONTROL_TAKEOVER = 0;
        HUMAN_CONTROL_RELEASE = 1;
    }

    message HumanControlRequest {
        ControlRequestType type = 1;
    }

    message HumanControlState {
        // let everyone know who is the active controller now
        string activeControllerId = 1;
    }

    // Broadcast car connects and disconnects
    message CarState {
        bool connected = 1;
        // We use these fields to calculate the offset between the car and the server time
        // this is used to correctly chart the car's data, even if the car and the server have different clocks
        // note: this does assume that the webcontroller and the forwarding server have synced clocks
        int64 timestampOffset = 2; // < 0 means that the car's time is behind the server's time, > 0 means that the car's time is ahead of the server's time
    }

    // To report unknown or general errors
    message Error {
        string message = 1;
    }

    oneof action {
        HumanControlRequest humanControlRequest = 1;
        HumanControlState humanControlState = 3;
        CarState carState = 6;
        Error error = 7;
    }
    int64 timestamp = 2;
}